<!DOCTYPE html>
<html>
<head>
    <title>Camera Zender</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body class="camera-zender-body">
<div class="d-flex justify-content-center align-items-center camera-wrapper">
    <div class="center-content">
        <div class="camera-box">
            <video id="video" class="camera-video" autoplay muted></video>
            <div class="camera-placeholder">
                <img src="/images/no-video.png" alt="No video available">
            </div>
        </div>
        <button id="toggleBtn" class="btn btn-outline-red mt-3">Start Camera</button>
    </div>
</div>


<script>
    const video = document.getElementById('video');
    const btn = document.getElementById('toggleBtn');
    let stream = null;
    let isStreaming = false;
    const streamId = crypto.randomUUID();
    let chunkIndex = 0;

    const cameraBox = document.querySelector('.camera-box');

    btn.onclick = async () => {
        if (!isStreaming) {
            stream = await navigator.mediaDevices.getUserMedia({ video: true });
            video.srcObject = stream;
            video.style.display = "block"; // ensure it's visible
            cameraBox.classList.add('camera-active');
            sendFrames();
            isStreaming = true;
            btn.textContent = 'Stop Camera';
        } else {
            stream.getTracks().forEach(t => t.stop());
            video.srcObject = null;                  // ✔️ remove camera feed
            video.removeAttribute("src");            // ✔️ make sure browser clears it
            video.load();                            // ✔️ reset the video state
            cameraBox.classList.remove('camera-active');
            isStreaming = false;
            btn.textContent = 'Start Camera';

        }
    };

    function sendFrames() {
        const track = stream.getVideoTracks()[0];
        const capture = new ImageCapture(track);

        async function captureAndSend() {
            const bitmap = await capture.grabFrame();
            const canvas = document.createElement('canvas');
            canvas.width = bitmap.width;
            canvas.height = bitmap.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(bitmap, 0, 0);

            canvas.toBlob(async (blob) => {
                const buffer = await blob.arrayBuffer();
                await fetch("/api/videochunk", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/octet-stream",
                        "X-Stream-Id": streamId,
                        "X-Chunk-Index": chunkIndex++
                    },
                    body: buffer
                });
            }, 'image/jpeg', 0.5);

            if (isStreaming) setTimeout(captureAndSend, 100);
        }

        captureAndSend();
    }
</script>
</body>
</html>
