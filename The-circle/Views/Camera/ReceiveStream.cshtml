@{
var streamId = ViewBag.StreamId;
}
<!DOCTYPE html>
<html>
<head>
    <title>Bekijk stream</title>
</head>
<body>
<h2>Inkomende stream van: <span id="streamerEmail">Onbekend</span></h2>
<img id="frame" width="640" height="480" />
<p id="status">⏳ Wacht op geldig frame...</p>

<script type="module">
    import * as asn1js from 'https://cdn.skypack.dev/asn1js';
    import { fromBER } from 'https://cdn.skypack.dev/asn1js';
    import { Certificate } from 'https://cdn.skypack.dev/pkijs';

    const img           = document.getElementById('frame');
    const status        = document.getElementById('status');
    const emailLabel    = document.getElementById('streamerEmail');
    const evtSource     = new EventSource(`/stream/${"@streamId"}`);

    function base64ToArrayBuffer(b64) {
        const bin = atob(b64), len = bin.length;
        const buf = new Uint8Array(len);
        for (let i = 0; i < len; i++) buf[i] = bin.charCodeAt(i);
        return buf.buffer;
    }

    evtSource.onmessage = async event => {
        const payload = JSON.parse(event.data);

        // 1) update the email in the UI
        emailLabel.textContent = payload.email;

        // 2) verify signature as before…
        const chunk     = Uint8Array.from(atob(payload.chunk),     c => c.charCodeAt(0));
        const signature = Uint8Array.from(atob(payload.signature), c => c.charCodeAt(0));
        const publicKey = await (async () => {
            // extract publicKey from payload.certificate…
            const certBuf = base64ToArrayBuffer(payload.certificate);
            const asn1    = fromBER(certBuf);
            const cert    = new Certificate({ schema: asn1.result });
            const spki    = cert.subjectPublicKeyInfo.toSchema().toBER(false);
            return crypto.subtle.importKey(
                "spki", spki,
                { name: "RSASSA-PKCS1-v1_5", hash: "SHA-256" },
                false, ["verify"]
            );
        })();

        const isValid = await crypto.subtle.verify(
            { name: "RSASSA-PKCS1-v1_5" },
            publicKey, signature, chunk
        );

        if (isValid) {
            img.src = "data:image/jpeg;base64," + payload.chunk;
            status.textContent = `✅ Frame ${payload.chunkIndex} gevalideerd.`;
        } else {
            status.textContent = `❌ Ongeldige handtekening voor chunk ${payload.chunkIndex}`;
        }
    };
</script>
</body>
</html>
